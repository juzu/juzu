The next step is to make our application obtain real data instead of the hardcoded values we used in the
previous section. For this matter we use a remote service that we encapsulate into the ##WeatherService##.

{{java}}
{@include examples.tutorial.services.WeatherService}
{{/java}}

Juzu uses dependency injection to interact with a service layer. The [[JSR-330>>http://jcp.org/en/jsr/detail?id=330]],
 also knowns as ##@Inject##, defines an API for dependency injection. The ##WeatherService## is injected in the
 controller with the ##weatherService## field annotated with the ##@Inject## annotation:

{{java}}
{@include examples.tutorial.weather3.Weather#weatherService}
{{/java}}

This service is then simply used into our controller ##index()## method:

{{java}}
{@include examples.tutorial.weather3.Weather#index()}
{{/java}}

As we can see, Juzu relies on the portable ##@Inject## annotation to declare sinjections. Injection is performed by the
dependency injection container. At the moment the following containers are supported:

  * [[Spring Framework>>http://www.springsource.org/]]
  * [[JBoss Weld>>http://seamframework.org/Weld]]

There is a preliminary support for [[Google Guice 3.0>>http://code.google.com/p/google-guice/wiki/Guice30]], but it is not
yet available. In the future more container support could be achieved.

By default it uses the //Weld// container, if you want instead to use //Spring// container instead the configuration
is done by a portlet init param defined in the deployment descriptor of the portlet:

{{xml indent=2}}
<init-param>
  <name>juzu.inject</name>
  <value>spring</value>
</init-param>
{{/xml}}

In the case of //Spring//, the file ##spring.xml## file is needed, it contains the service declarations for the Spring
container.

Juzu provides more advanced dependency injection, in particular it uses the ##Qualifier## and ##Scope## features defined
  by the JSR-330 specification that will be studied later.
