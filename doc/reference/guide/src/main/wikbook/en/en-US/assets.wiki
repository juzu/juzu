Web assets are resources used over the web such as stylesheet and script files.

= Asset serving =

Assets are declared by the application with the following attributes:

* an //id// to reference it
* a //location// defining where to find the asset
* a //source// for locating the asset
* a list of //dependencies// referencing other assets specifying the assets that needs to be served before the declaration

When an application is deployed, assets are registered with the //asset manager//. The asset manager has several
 responsibilities:

* manage asset dependencies: the order in which assets are literaly declared when they are served. For instance
the //jquery-ui// asset depends on the //jquery// asset because the jquery script must be loaded before the //jquery-ui//
script.
* resolve asset references: each asset reference must be resolved and produce a final web url that will produce the resource
 when it is resolved by the web browsers

During a request, asset identifiers are added to the response. At the end of the request, the runtime uses the
asset manager to translate the response assets into a list of uri to add to the page.

[[image:images/assets/assets1.png||title="Using assets in a request" align="center" html:scale="100" fo:width="100mm]]

An asset reference is a link to an asset value that is configured externally, thus an asset of any kind will always resolve
to a location and an uri. Let's examine the different possible asset location:

* ##AssetLocation.URL##: the value is opaque to Juzu, for instance the a CDN hosted script such as //https:\/\/ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js//.
* ##AssetLocation.SERVER##: the asset is served by the same web server in which Juzu is deployed. If the asset value is relative, the final uri will
resolve relatively to the web archive context address.
* ##AssetLocation.APPLICATION##: the asset is served by Juzu //asset server// (a servlet configured in the web application) and the resource is located
 on the classpath.

= Asset server =

For serving classpath assets, Juzu requires the configuration of the asset server as a servlet declaration:

{{xml}}
<servlet>
  <servlet-name>AssetServlet</servlet-name>
  <servlet-class>juzu.impl.asset.AssetServlet</servlet-class>
  <load-on-startup>0</load-on-startup>
</servlet>
<servlet-mapping>
  <servlet-name>AssetServlet</servlet-name>
  <url-pattern>/assets/*</url-pattern>
</servlet-mapping>
{{/xml}}

This declaration should be in the //web.xml// of the application whether it is a servlet or a portlet application.

{{note}}If you are using Servlet 3.0, this declaration is not necessary{{/note}}

= Asset plugin =

The asset plugin provides declarative asset configuration, it will take care of registering assets on the asset manager.
The ##@Assets## annotation declares a list of assets used by the an application.

{{example title="JQuery UI declarative asset configuration"}}
{{java}}
@Assets(
  scripts = {
    @Script(id = "jquery",
            src = "javascripts/jquery-1.7.1.min.js"), // <1> Declares the jquery asset
    @Script(src = "javascripts/jquery-ui-1.7.2.custom.min.js", // <2> Declares the jquery-ui asset
            depends = "jquery") // <3> Make jquery-ui depend on jquery
  },
  stylesheets = {
    @Stylesheet(src = "ui-lightness/jquery-ui-1.7.2.custom.css")
  }
)
package my.application;
{{/java}}
{{/example}}

The assets will be served by the asset servlet because the application location is the default when not specified. The
first ##@Script## annotation declares the JQuery asset reference identified by the ##id## member as being //jquery//.
The second ##@Script## annotation declares the JQuery-UI plugin, it does not need an //id// member because nothing refers
to it, however it declares a dependency with the //depends// member that declares it depending on the //jquery//
asset. JQuery-UI requires also a stylesheet to be served along with the script, it is achieved thanks to the
##@Stylesheet## annotation.

== Application assets ==

Applications assets can be located anywhere on the application classpath, they can be either absolute or relatives. Relative
assets declared by the asset plugin must be located in the ##assets## package of the application, for instance
an application packaged under ##my.application## will have its relative assets located under ##my.application.assets##.

{{example title="Declarative relative application asset configuration"}}
{{java}}
@Assets(scripts = @Script(
  src = "myscript.js"))
package my.application;
{{/java}}
{{/example}}

The location ##AssetLocation.APPLICATION## is not declared because it is the default one.

== Server assets ==

Server assets are served by the webserver in which the application is deployed. Relative server assets are served from
the war file containing the application.

{{example title="Declarative relative server asset configuration"}}
{{java}}
@Assets(scripts = @Script(src = "myscript.js", location = AssetLocation.SERVER))
package my.application;
{{/java}}
{{/example}}

== External assets ==

External assets declares an opaque URL for Juzu.

{{example title="External classpath asset configuration"}}
{{java}}
@Assets(scripts = @Script(
  src = "https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js",
  location = AssetLocation.URL))
package my.application;
{{/java}}
{{/example}}

= Managing assets programmatically =

The ##@Assets## annotations will serve all the declared assets in ##scripts## and ##stylesheets##. Sometimes it is
 convenient to declared assets but serve them upon application request. This can be achieved with the ##declaredScripts##
 and ##declaredStylesheets## declarations:

{{java}}
@Assets(declaredScripts = @Script(
  id = "myscript",
  src = "myscript.js"))
package my.application;
{{/java}}

When an application requires an asset, it adds the asset to the ##Response.Content## object:

{{java}}
@Inject
@Path("index.gtmpl")
Template index;

@View
public Response.Content index() {
  Response.Content render = index.render();
  render.withScript("myscript");
  return render;
}
{{/java}}

The same with a fluent syntax:

{{java}}
@Inject
@Path("index.gtmpl")
Template index;

@View
public Response.Content index() {
  return index.render().withScript(myscript""));
}
{{/java}}
