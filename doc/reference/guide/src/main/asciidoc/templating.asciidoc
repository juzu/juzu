Templating is the _View_ part of a Model View Controlle architecture. We will study in this chapter how
the templating system interacts with the Juzu, at compilation time and at runtime, both aspects are very
important.

== The templating engines

Juzu can use several templating engines, it provides a native template engine as well as the Mustache templating engine.
Those engines are not competing, instead they should be seen as alternatives: the native Groovy engine provides the
goodness of the Groovy languages, however sometimes some people prefer logic-less templates and
http://mustache.github.com/[Mustache] is a template engine they should use. Let's introduce them briefly.

=== The native template engine

The native template engine extends the http://groovy.codehaus.org/Groovy+Templates[Groovy templating system]:
it can include snippet of Groovy code or resolve Groovy expressions:

==== Expressions

Expressions are simply Groovy expressions wrapped with the +${...}+ syntax:

----
The sky is ${color}
----

==== Scriplets

Groovy code can also literaly be used with the _scriplet_ syntax: +<% ... %>+. Within a scriptlet the +out+ implicit object
can be used for outputting markup:

----
<ul>
<% ["red","green","blue"].each { color -> out.print("<li>The sky is ${color}</li>") } %>
</ul>
----

The scriplet syntax +<%= ... %>+ can also be used:

----
The sky is <%= color %>
----

==== Controller urls

Controller urls is natively supported by the engine, it allows to create controller URL with a short and compact syntax
+@{...}+:

.Controller URL syntax
----
<a href="@{index()}">Home</a>
----

URL expressions can contain parameters and they must be named:

.Controller URL with parameters
----
<a href="@{purchase(product=1)}">Purchase</a>
----

The _purchase_ method refers to a controller method, when the application has several controllers, the controller name
can be used to prefix the url expression and remove the ambiguity:

.Explicit controller URL
----
<a href="@{Controller.purchase(product=1)}">Purchase</a>
----

Under the hood the controller URL syntax uses the controller compagnion for creating the URL: the +Controller.purchase(product=1)+
will uses the controller compagnion +Controller_#purchase(String product)+.

[[messages]]
==== Messages

You can resolve a message in resource bundles in a template with the +&{...}+ syntax:

.Message syntax
----
<label>&{color}</label>
<input type="text" name="color">
----

When the message is not found, no output will be done. The resource bundle is resolved with
the current user locale. The <<i18n>> section explains resource bundle configuration.

==== Taglib

The native engine provides taglib support using the +#{tag}...#{/tag}}+ or +#{tag/}+ syntax:

----
#{title value=Hello/}
----

Available tags are explained in the <<taglib>>.

==== Groovy template compilation

During the compilation phase, the native template engine transforms the _gtmpl_ templates into _groovy_ files. Such files
are valid Groovy scripts and they need to be compiled sometime into bytecode before execution at runtime. By default
there is nothing to do, since Juzu will compile the _groovy_ file when it is needed, however you can compile the templates
ahead of time with your build if you want, doing it provides two advantages:

* since compilation is done before runtime, it will save a bit of time when the template is used since loading a mere
class is significanly cheaper than compiling a Groovy template. (note we are talking of a few milliseconds here)
* if your templates contains Groovy code, this code will be validated before execution, this is probably a more valid
reason than the previous one

Maven builds can use the _gmaven-plugin_ to achieve this:

[source,xml,indent=0]
.Compiling _groovy_ sources to classes with the _gmaven-plugin_
----
include::{sourcesdir}/META-INF/maven/org.juzu/juzu-booking/pom.xml[tags=gmaven-plugin]
----

=== The Mustache template engine

The Mustache template engine uses _logic-less_ templates based on https://github.com/spullara/mustache.java[Mustache.java]
the Java port of Mustache. Mustache is very easy to use, you can read the http://mustache.github.com/mustache.5.html[documentation],
however we will have a quick overview of how it can be used in Juzu:

==== Variables

Variables uses the +{{...}}+ syntax, they are resolved against template parameters or beans.

----
The sky is {{color}}
----

==== Sections

Mustache sections allows to iterate expressions that are multivalued.

----
todo
----

== Using templates

A template as seen by an application is a bean managed by the IOC container.

=== Template declaration

Applications use a template by injecting a +juzu.template.Template+ object in its controllers qualified by the
+juzu.Path+ annotation:

.Using a template
[source,java]
----
public class Controller {

  @Inject
  @Path("index.gtmpl") // <1>
  Template index;

  @View
  public Response.Content index() {
    index.ok(); // <2>
  }
}
----
<1> Declares the template path
<2> Returns a content response from the template


The +@Path+ declares the template to use, the value is usually a path relative to the +templates+ package. The value
can also be absolute like +/my/application/templates/index.gtmpl+.

The +@Inject+ annotation instructs the injection container the inject the template at runtime, so it can be used
by the controller.

The +render+ method of a template returns a +juzu.Response.Content+ response which can also be returned
by the controller method.

NOTE: The +juzu.Path+ annotation is a qualifier annotation managed by the IOC container. It is very much like the
+@javax.inject.Named+ qualifier, but it has a special meaning for Juzu for processing the template.


=== Template reuse

Template can be shared between applications: one application can reuse the templates of another application
by using an absolute path value instead of a relative path value:

.Reusing a template
[source,java]
----
@Inject
@Path("/my/other/application/templates/index.gtmpl")
Template index;
----

There are a few things to keep in mind when using external templates:

* templates will not be compiled by the current application.
* relative templates references (such as inclusion) are relative to the initial compilation directory, so don't expect
this behavior to be dynamic (since it would break compile time safety).

=== Type safe parameters

Template type safe parameters brings more type safety in your applications. Templates can declare parameters and they
are made available on a subclass of the +juzu.template.Template+ class.

Parameters are declared using the taglib support of the native template engine

.Native template parameter declaration
----
#{param name=color/}
The sky is ${color}.
----

or the pragma support of the Mustache engine

.Mustache template parameter declaration
----
{{%param color}}
The sky is {{color}}.
----

When the template is declared in a controller, a subclass of +juzu.template.Template+ can be used:

[source,java]
----
package weather;

public class Controller {

  @Inject
  @Path("sky.gtmpl")
  weather.templates.sky sky; // <1>

  @View
  public Response.Content index() {
    sky.with().color("blue").ok(); // <2>
  }
}
----
<1> The +weather.templates.sky+ typed template class
<2> Use the +sky+ template +color+ parameter

The +weather.templates.sky+ class does not exist in the original source but it is available when the application
is compiled because it will be generated by Juzu compiler integration. The +sky+ templates provides a _fluent_
syntax to bind parameters: +sky.with().color("blue").ok()+.

=== Expression resolution

When we studied the templating engine syntax but we did not mentioned exactly how expression are resolved.

==== Single name expressions

Both templating system provides a syntax for resolving single name expressions:

* +${...}+ for Groovy
* +{{...}}+ for Mustache

Resolution is performed against template parameters or bean named with the +javax.inject.Named+ qualifier.

.Named bean
[source,java]
----
@javax.inject.Named("color")
public class Color {
  public String toString() {
    return "red";
  }
}
----

.Template parameters
[source,java]
----
index.with().set("color", "red").ok(); // <1>
index.with().color("red").ok(); // <2>
----
<1> Detyped version
<2> Type safe version

==== Compound expressions

Compound expressions are resolved the same way for the first name and the expression resolve will attempt to
navigate the rest of the expressions from this object:

* +${weather.color}+ for Groovy
* +{{#weather}}{\{color}}{{/weather}}+ for Mustache

.Named bean
[source,java]
----
@javax.inject.Named("weather")
public class Weather {

  private String color;

  public Weather(String color) {
    this.color = color;
  }

  public Weather() {
    this.color = "red";
  }

  public String getColor() {
    return color;
  }
}
----

.Template parameters
[source,java]
----
index.with().set("weather", new Weather("blue")).ok(); // <1>
index.with().color(new Weather("blue")).ok(); // <2>
----
<1> Detyped version
<2> Type safe version
